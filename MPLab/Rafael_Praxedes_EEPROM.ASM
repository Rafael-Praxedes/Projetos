;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICAÇÕES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                    FEVEREIRO DE 2014                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       NOME DO PROJETO                           *
;*                           CLIENTE                               *
;*         DESENVOLVIDO PELA MOSAICO ENGENHARIA E CONSULTORIA      *
;*   VERSÃO: 1.0                           DATA: 17/06/03          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     DESCRIÇÃO DO ARQUIVO                        *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;*                                                                 *
;*                                                                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINIÇÕES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <p12f675.inc>	;ARQUIVO PADRÃO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINAÇÃO DE MEMÓRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINIÇÃO DE COMANDOS DE USUÁRIO PARA ALTERAÇÃO DA PÁGINA DE MEMÓRIA
#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEMÓRIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MAMÓRIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIÁVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DOS NOMES E ENDEREÇOS DE TODAS AS VARIÁVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDEREÇO INICIAL DA MEMÓRIA DE
				;USUÁRIO
		W_TEMP		;REGISTRADORES TEMPORÁRIOS PARA USO
		STATUS_TEMP	;JUNTO ÀS INTERRUPÇÕES
		DADO		;ARMAZENA O DADO PARA EEPROM
		INDEX_EEPROM	;POSIÇÕES DA EEPROM 
		COUNT		;CONTADOR DO NUMERO DE DADOS QUE DEVEM SER CARREGADOS PARA RAM/EEPROM
		i
		j
		ID_MENOR	;Guarda o índice do menor elemento selecionado a cada iteração do algoritmo
		VAR1		;Variável 1 que será utilizada em uma instução de comparação do algoritmo de ordenação
		VAR2		;Variável 2 que será utilizada em uma instução de comparação do algoritmo de ordenação
		TEMP1		;Variáveis (TEMP1 e TEMP2) que armazenam, temporariamente, o valor dos
		TEMP2		;elementos sobre os quais será feita a troca

	ENDC			;FIM DO BLOCO DE MEMÓRIA
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA
	#define LED GPIO, GP5

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA
; INICIALIZAÇÃO DA EEPROM, DE ACORDO COM A DESCRIÇÃO NO ARQUIVO "Def_Rega_Formigas.inc"

;A PARTIR DO ENDEREÇO ZERO DA EEPROM, DADOS EM ORDEM ALEATÓRIA
	ORG 0x2100
	DE	0X89,0X1E,0X39,0X9F,0XC2,0X0C,0XAB,0X33,0X63,0XD3,0X95,0X7B,0X38,0XD6,0X1E,0X48
	DE	0XDB,0XD8,0X86,0XFD,0XA5,0XFC,0X0C,0XBE,0X68,0X9B,0XD9,0X10,0XD8,0XEC,0X90,0X91
	DE	0XAA,0XBB,0XCC,0XDD,0XEE,0XF1,0XC9,0X77

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAÍDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO SAÍDA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDEREÇO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INÍCIO DA INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDEREÇO DE DESVIO DAS INTERRUPÇÕES. A PRIMEIRA TAREFA É SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERAÇÃO FUTURA

	ORG	0x04		;ENDEREÇO INICIAL DA INTERRUPÇÃO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SERÁ ESCRITA AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUPÇÕES

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SAÍDA DA INTERRUPÇÃO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUPÇÃO

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRIÇÃO DE FUNCIONAMENTO
; E UM NOME COERENTE ÀS SUAS FUNÇÕES.
LE_EEPROM
;LER DADO DA EEPROM, CUJO ENDEREÇO É INDICADO EM W
;DADO LIDO RETORNA EM W
	
	ANDLW	.127			;LIMITA ENDEREÇO MAX. 127
	BANK1				;ACESSO VIA BANK 1
	MOVWF	EEADR			;INDICA O END. DE LEITURA
	BSF	EECON1,RD		;INICIA O PROCESSO DE LEITURA
	MOVF	EEDATA,W		;COLOCA DADO LIDO EM W
	BANK0				;POSICIONA PARA BANK 0
	RETURN

GRAVA_EEPROM
;ESCREVE DADO (DADO) NA EEPROM, CUJO ENDEREÇO É INDICADO EM W
	
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1			;ACESSO VIA BANK 1
	MOVWF	EEADR
	MOVF	DADO,W
	MOVWF	EEDATA
	BSF	EECON1,WREN	;HABILITA ESCRITA
	BCF	INTCON,GIE	;DESLIGA INTERRUPÇÕES
	MOVLW	B'01010101'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	MOVLW	B'10101010'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	BSF	EECON1,WR	;INICIA A ESCRITA
AGUARDA
	BTFSC	EECON1,WR	;TERMINOU?
	GOTO	AGUARDA
	BSF	INTCON,GIE	;HABILITA INTERRUPÇÕES
	BANK0			;POSICIONA PARA BANK 0
	RETURN
	
CARREGA_RAM
;LÊ OS DADOS DA EEPROM E CARREGA-OS NA MEMORIA RAM 
	
	MOVLW	0x30
	MOVWF   FSR			    ;Inicializa o ponteiro da RAM
	
	MOVLW   .40
	MOVWF	COUNT			    ;Inicializa o contador de elementos restantes a serem lidos da EEPROM
	
	MOVLW   0x00 
	MOVWF   INDEX_EEPROM		    ;Inicializa o contador de posições da EEPROM 
	
    LENDO	CALL	LE_EEPROM		
		MOVWF	INDF
		
		INCF	FSR		    ;Modifica a posição na RAM
		INCF	INDEX_EEPROM	   
		MOVF	INDEX_EEPROM, W	    ;Manda o índice de acesso a RAM atualizado para a EEPROM
		DECFSZ	COUNT		    
		GOTO	LENDO
		
		RETURN
TROCA
;FAZ A TORCA ENTRE OS ELEMENTOS DA RAM CONTIDOS NAS POSIÇÕES INDICADAS POR i E ID_MENOR
		
	MOVFW	i
	ADDWF	FSR	    ;Adiciona-se o offset indicado em i ao endereço inicial apontado por FSR
	MOVFW	INDF
	MOVWF	TEMP1	    ;Armazena o primeiro valor a ser trocado  
	MOVFW	i
	SUBWF	FSR	    ;Subtrai-se o offset indicado em i, de modo a recuperar o endereço inicial de FSR
	
	MOVFW	ID_MENOR    
	ADDWF	FSR	    ;Adiciona-se o offset indicado em ID_MENOR ao endereço inicial apontado por FSR
	MOVFW	INDF
	MOVWF	TEMP2	    ;Armazena o segundo valor a ser trocado
	
	MOVFW	TEMP1	    ;Faz-se a atribuição do elemento que estava na posição indicada em i para a 
	MOVWF	INDF	    ;a posição indicada em ID_MENOR
	
	MOVFW	ID_MENOR
	SUBWF	FSR	    ;Subtrai-se o offset indicado em ID_MENOR, de modo a recuperar o endereço inicial de FSR
	
	MOVFW	i	    ;Adiciona-se o offset indicado em i ao endereço inicial apontado por FSR
	ADDWF	FSR
	MOVFW	TEMP2	    ;Faz-se a atribuição do elemento que estava na posição indicada em ID_MENOR para a
	MOVWF	INDF	    ;a posição indicada em i
	MOVFW	i
	SUBWF	FSR	    ;Subtrai-se o offset indicado em i, de modo a recuperar o endereço inicial de FSR
	
	RETURN 

ORDENACAO_POR_SELECAO
;Faz a ordenação dos elementos presentes na memória por meio do algoritmo Selection Sort	
	
	MOVLW	0x30			;Reinicializa o ponteiro da RAM
	MOVWF	FSR
	
	MOVLW	.0
	MOVWF	i			;Inicializa o contador do primeiro loop
	
    FOR_1	
		MOVLW	.39		;Quantidade de elementos a serem ordenados - 1 = 39
		SUBWF	i, W
	
		BTFSC	STATUS, C	;Se o carry for igual a 1, i = 39 e, portanto,
		GOTO	FIM_FOR_1	;o loop FOR mais externo é encerrado
		
		MOVFW	i
		MOVWF	ID_MENOR	;Considera-se como menor elemento da iteração do algoritmo 
					;de ordenação aquele que está na posição indicada por i
		MOVLW	.1
		ADDWF	i, W
		MOVWF	j
	
	FOR_2	
		MOVLW	.40		;Quantidade de elementos a serem ordenados = 40
		SUBWF	j, W
		
		BTFSC	STATUS, C	;Se o carry for igual a 1, j = 40 e, portanto,
		GOTO	FIM_FOR_2	;o loop FOR mais interno é encerrado
		
		MOVFW	ID_MENOR
		ADDWF	FSR
		MOVFW	INDF
		MOVWF	VAR1		;Atribui-se a VAR1 o valor contido na posição FSR + ID_MENOR
		MOVFW	ID_MENOR
		SUBWF	FSR
		
		MOVFW	j
		ADDWF	FSR
		MOVFW	INDF
		MOVWF	VAR2		;Atribui-se a VAR2 o valor contido na posição FSR + j
		MOVF	j, W
		SUBWF	FSR
		
		MOVF	VAR2, W
		SUBWF	VAR1, W
		
		BTFSC	STATUS, C	;Se o carry = 1, VAR1 > VAR2 e, portanto,
		GOTO	ATUALIZA_MENOR	;atualiza-se o indice responsável pela posição
					;do menor elemento
		
		INCF	j
		GOTO	FOR_2
    
    ATUALIZA_MENOR
		MOVFW	j
		MOVWF	ID_MENOR	
		
		INCF	j
		GOTO	FOR_2
    FIM_FOR_2
		MOVFW	i
		SUBWF	ID_MENOR, W
		BTFSS	STATUS, Z	;Se o bit Zero = 0, i != ID_MENOR ou seja, 
		CALL	TROCA		;encontrou-se um valor ainda menor do que aquele
					;que estava sendo considerado como tal e, portanto,
					;coloca-o na posição correspondente, de modo que o conjunto
					;de elementos fiquem ordenados de forma crescente 
		INCF	i		
		GOTO	FOR_1
    FIM_FOR_1
		RETURN
		
RECARREGA_EEPROM
;Recarrega a EEPROM com os valores ordenados
		
		MOVLW	.0
		MOVWF	INDEX_EEPROM	;Inicializa o contador de posições da EEPROM  
		
		MOVLW	.40
		MOVWF	COUNT		;Inicializa o contador de elementos restantes a serem lidos da EEPROM
	
	ESCREVENDO
		MOVFW	INDF
		MOVWF	DADO		;Obtêm-se o dado da RAM
		MOVFW	INDEX_EEPROM	;Move-se o INDEX_EERPOM para o W, de modo que ele possa
					;ser utilizado na função GRAVA_EEPROM
		CALL	GRAVA_EEPROM
		
		INCF	FSR		;Modifica-se a posição na RAM, de modo a obter o próximo elemento
		INCF	INDEX_EEPROM	
		MOVFW	INDEX_EEPROM	;Atualiza-se o indice de acesso a uma posição da EEPROM
		
		DECFSZ	COUNT
		GOTO	ESCREVENDO
		
		RETURN

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1			;ALTERA PARA O BANCO 1
	MOVLW	B'00000000'	;CONFIGURA TODAS AS PORTAS DO GPIO (PINOS)
	MOVWF	TRISIO		;COMO SAÍDAS
	CLRF	ANSEL 		;DEFINE PORTAS COMO Digital I/O
	MOVLW	B'00000100'
	MOVWF	OPTION_REG	;DEFINE OPÇÕES DE OPERAÇÃO
	MOVLW	B'00000000'
	MOVWF	INTCON		;DEFINE OPÇÕES DE INTERRUPÇÕES
	BANK0			;RETORNA PARA O BANCO
	MOVLW	B'00000111'
	MOVWF	CMCON		;DEFINE O MODO DE OPERAÇÃO DO COMPARADOR ANALÓGICO

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZAÇÃO DAS VARIÁVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CLRF	GPIO	;Desativa todos os LED's
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;******************************************;
;** Aluno: Rafael Maranhão Rêgo Praxedes **;
;**                                      **;
;** Matrícula: 11503299                  **;
;**                                      **;
;** Disciplina: Microcontroladores       **;
;**                                      **;
;** Professor: Mardson Amorim            **;
;******************************************;
	
MAIN
	;CORPO DA ROTINA PRINCIPAL
	
	CALL	CARREGA_RAM
	BSF	LED			;Acende o LED (Porta GP5)
	CALL	ORDENACAO_POR_SELECAO
	BCF	LED			;Desliga o LED (Porta GP5)
	CALL	RECARREGA_EEPROM
	

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

FIM
	GOTO FIM

	END
